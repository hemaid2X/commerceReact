// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bvkZrMdCandYGyPCH1rh27
// Component: oy9J-HiVCgE7cB
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: cYId4hGiw5HGOl/component
import CopyrightSocialLanguage from "../../CopyrightSocialLanguage"; // plasmic-import: gN5VFAYYcN-qW4/component
import { useScreenVariants as useScreenVariantshZ85LbGiaxg0I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hZ8-5LbGiaxg0I/globalVariant
import { useUnnamedGlobalGroupOfVariants } from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: hcBIwuNqA6-pvl/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: bvkZrMdCandYGyPCH1rh27/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: oy9J-HiVCgE7cB/css
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: GHduzl5fZqijlp/icon
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: eB1cOW98y_DFih/icon

export const PlasmicFooter__VariantProps = new Array();

export const PlasmicFooter__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshZ85LbGiaxg0I(),
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants()
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__qGeJj)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___6LG8Z)}
        >
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__qjhVc
            )}
          >
            {"Subscribe"}
          </h3>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bu5Zl)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__r9YVs)}
              >
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__r2Hf7
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {"FAQ"}
                </a>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__pzxhh
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {"Shipping"}
                </a>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__nTums)}
              >
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__qNxja
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {"Returns + Exchanges"}
                </a>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__lUdPn
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {"Contact Us"}
                </a>
              </p.Stack>
            </p.Stack>
          ) : null}
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___4NXyO)}
        >
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__iqsUu
            )}
          >
            {"SUPPORT"}
          </h3>
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dnLh7)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___0TLnP)}
              >
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___6FJo
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {"FAQ"}
                </a>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___1AJv3
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {"Shipping"}
                </a>
              </p.Stack>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__f3KyM)}
              >
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___6YMq
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {"Returns + Exchanges"}
                </a>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__zrRw
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {"Contact Us"}
                </a>
              </p.Stack>
            </p.Stack>
          ) : null}
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jdIsc)}
        >
          <h3
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3__cvk63
            )}
          >
            {"COMPANY"}
          </h3>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__otlDr)}>
              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                endIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__kzeEo)}
                    role={"img"}
                  />
                }
                onChange={(...eventArgs) => {
                  p.generateStateOnChangeProp($state, ["textInput", "value"])(
                    (e => e.target?.value).apply(null, eventArgs)
                  );
                }}
                placeholder={"Email address..."}
                value={p.generateStateValueProp($state, ["textInput", "value"])}
              />

              <RightArrowIcon
                className={classNames(projectcss.all, sty.svg__z4TUe)}
                role={"img"}
              />
            </div>
          ) : null}
        </p.Stack>
      </p.Stack>
      <CopyrightSocialLanguage
        data-plasmic-name={"copyrightSocialLanguage"}
        data-plasmic-override={overrides.copyrightSocialLanguage}
        className={classNames("__wab_instance", sty.copyrightSocialLanguage, {
          [sty.copyrightSocialLanguageglobal_unnamedGlobalGroupOfVariants_unnamedVariant]:
            hasVariant(
              globalVariants,
              "unnamedGlobalGroupOfVariants",
              "unnamedVariant"
            )
        })}
      />
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "textInput", "copyrightSocialLanguage"],
  textInput: ["textInput"],
  copyrightSocialLanguage: ["copyrightSocialLanguage"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    copyrightSocialLanguage: makeNodeComponent("copyrightSocialLanguage"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
