// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bvkZrMdCandYGyPCH1rh27
// Component: q2RQgBPkowA7y
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import NavBar from "../../NavBar"; // plasmic-import: N0v6bLZvVhtSjH/component
import { CategoryCollection } from "@plasmicpkgs/commerce"; // plasmic-import: ny07p45F84c_/codeComponent
import Collection from "../../Collection"; // plasmic-import: s1Z_M2JcVX-_M6/component
import { CategoryMedia } from "@plasmicpkgs/commerce"; // plasmic-import: yOXBNIAJxzUq/codeComponent
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import ProductMain from "../../ProductMain"; // plasmic-import: _ufapZf9wn6BWm/component
import ShopingSection from "../../ShopingSection"; // plasmic-import: vVEnLULYzbuBh3/component
import Instagram from "../../Instagram"; // plasmic-import: 6sZvKT5GqJ8zc4/component
import Footer from "../../Footer"; // plasmic-import: oy9J-HiVCgE7cB/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: bvkZrMdCandYGyPCH1rh27/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: q2RQgBPkowA7y/css
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: eB1cOW98y_DFih/icon

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <div
              data-plasmic-name={"heroSection"}
              data-plasmic-override={overrides.heroSection}
              className={classNames(projectcss.all, sty.heroSection)}
            >
              <NavBar
                data-plasmic-name={"navBar"}
                data-plasmic-override={overrides.navBar}
                className={classNames("__wab_instance", sty.navBar)}
              />

              <section
                className={classNames(projectcss.all, sty.section__fnGab)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"container3"}
                  data-plasmic-override={overrides.container3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.container3)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__qlUOf)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rFtsm)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"The care you've always needed"}
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nP9Sy
                        )}
                      >
                        {"A RANGE OF PRODUCTS FOR YOU"}
                      </div>
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__cF1Bk
                          )}
                        >
                          <button
                            data-plasmic-name={"button"}
                            data-plasmic-override={overrides.button}
                            className={classNames(
                              projectcss.all,
                              projectcss.button,
                              projectcss.__wab_text,
                              sty.button
                            )}
                          >
                            {"Shop Now"}
                          </button>
                        </div>
                      ) : null}
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </section>
            </div>
          ) : null}
          <section className={classNames(projectcss.all, sty.section__ihGNi)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__u1GGq)}
            >
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__c3VaQ
                )}
              >
                {
                  "MOISTURE IS THE ESSENCE OF WETNESS, AND WETNESS IS THE ESSENCE OF BEAUTY."
                }
              </h3>
              {true ? (
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__fU6N
                  )}
                  href={`/aboutus`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h0ZrV
                    )}
                  >
                    {"Find out more"}
                  </div>
                  <RightArrowIcon
                    className={classNames(projectcss.all, sty.svg__g0Oj8)}
                    role={"img"}
                  />
                </p.Stack>
              ) : null}
            </p.Stack>
          </section>
          <p.Stack
            as={"section"}
            hasGap={true}
            className={classNames(projectcss.all, sty.section__zJz8E)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__a8YrR)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"Categories"}
              </h2>
            </p.Stack>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__wypYp)}>
                <CategoryCollection
                  category={"6267de7030e3370018d347ab"}
                  className={classNames(
                    "__wab_instance",
                    sty.categoryCollection__h5AWc
                  )}
                  emptyMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__paqI
                          )}
                        >
                          {"No collection found!"}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                  loadingMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1NjI2
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <Collection
                        className={classNames(
                          "__wab_instance",
                          sty.collection__aomCz
                        )}
                      >
                        <CategoryMedia
                          className={classNames(
                            "__wab_instance",
                            sty.categoryMedia__bBGxU
                          )}
                        />
                      </Collection>
                    )}
                  </ph.DataCtxReader>
                </CategoryCollection>
              </div>
              <div className={classNames(projectcss.all, sty.column__evbzt)}>
                <CategoryCollection
                  category={"6267e0ec4443d3001919b87b"}
                  className={classNames(
                    "__wab_instance",
                    sty.categoryCollection__umlHo
                  )}
                  emptyMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1BPfF
                          )}
                        >
                          {"No collection found!"}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                  loadingMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bPht
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <Collection
                        className={classNames(
                          "__wab_instance",
                          sty.collection__w5NL9
                        )}
                      >
                        <CategoryMedia
                          className={classNames(
                            "__wab_instance",
                            sty.categoryMedia__d5BG
                          )}
                        />
                      </Collection>
                    )}
                  </ph.DataCtxReader>
                </CategoryCollection>
              </div>
              <div className={classNames(projectcss.all, sty.column__buJg)}>
                <CategoryCollection
                  category={"6267e10630e3370018d76b94"}
                  className={classNames(
                    "__wab_instance",
                    sty.categoryCollection__yIvme
                  )}
                  emptyMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8RlB8
                          )}
                        >
                          {"No collection found!"}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                  loadingMessage={
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__titKd
                          )}
                        >
                          {"Loading..."}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  }
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <Collection
                        className={classNames(
                          "__wab_instance",
                          sty.collection__ucQjp
                        )}
                      >
                        <CategoryMedia
                          className={classNames(
                            "__wab_instance",
                            sty.categoryMedia__wXiE9
                          )}
                        />
                      </Collection>
                    )}
                  </ph.DataCtxReader>
                </CategoryCollection>
              </div>
            </div>
          </p.Stack>
          <p.Stack
            as={"section"}
            hasGap={true}
            className={classNames(projectcss.all, sty.section__kxSa)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yyBGt)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rn0AS
                )}
              >
                {"Introducing Our Latest Products"}
              </div>
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__q0165
                )}
              >
                {"Limited reservations on upcoming products and restocks."}
              </h3>
              {true ? (
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__eTcA
                  )}
                  href={`/item`}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__um9W0
                    )}
                  >
                    {"See more product"}
                  </div>
                  <RightArrowIcon
                    className={classNames(projectcss.all, sty.svg__vZgNk)}
                    role={"img"}
                  />
                </p.Stack>
              ) : null}
            </p.Stack>
            <ProductCollection
              data-plasmic-name={"productCollection"}
              data-plasmic-override={overrides.productCollection}
              className={classNames("__wab_instance", sty.productCollection)}
              count={4}
              emptyMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ssFae
                      )}
                    >
                      {"No product found!"}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              loadingMessage={
                <ph.DataCtxReader>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9P0Ms
                      )}
                    >
                      {"Loading..."}
                    </div>
                  )}
                </ph.DataCtxReader>
              }
              sort={"latest-desc"}
            >
              <ph.DataCtxReader>
                {$ctx => (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zVolb)}
                  >
                    <ProductMain
                      data-plasmic-name={"productMain"}
                      data-plasmic-override={overrides.productMain}
                      className={classNames("__wab_instance", sty.productMain)}
                    />
                  </div>
                )}
              </ph.DataCtxReader>
            </ProductCollection>
          </p.Stack>
          <ShopingSection
            data-plasmic-name={"shopingSection"}
            data-plasmic-override={overrides.shopingSection}
            className={classNames("__wab_instance", sty.shopingSection)}
          />

          <Instagram
            data-plasmic-name={"instagram"}
            data-plasmic-override={overrides.instagram}
            className={classNames("__wab_instance", sty.instagram)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "heroSection",
    "navBar",
    "container3",
    "h1",
    "button",
    "h2",
    "columns",
    "productCollection",
    "productMain",
    "shopingSection",
    "instagram",
    "footer"
  ],

  heroSection: ["heroSection", "navBar", "container3", "h1", "button"],
  navBar: ["navBar"],
  container3: ["container3", "h1", "button"],
  h1: ["h1"],
  button: ["button"],
  h2: ["h2"],
  columns: ["columns"],
  productCollection: ["productCollection", "productMain"],
  productMain: ["productMain"],
  shopingSection: ["shopingSection"],
  instagram: ["instagram"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heroSection: makeNodeComponent("heroSection"),
    navBar: makeNodeComponent("navBar"),
    container3: makeNodeComponent("container3"),
    h1: makeNodeComponent("h1"),
    button: makeNodeComponent("button"),
    h2: makeNodeComponent("h2"),
    columns: makeNodeComponent("columns"),
    productCollection: makeNodeComponent("productCollection"),
    productMain: makeNodeComponent("productMain"),
    shopingSection: makeNodeComponent("shopingSection"),
    instagram: makeNodeComponent("instagram"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "ShoeShop",
      description:
        "Ad ullamcorper eros nibh pharetra vulputate imperdiet consectetur vestibulum at ac posuere volutpat maecenas gravida dictum suscipit habitasse class scelerisque fermentum blandit mi a.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
