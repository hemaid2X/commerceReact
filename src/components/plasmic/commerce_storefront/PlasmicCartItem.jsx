// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bvkZrMdCandYGyPCH1rh27
// Component: RVnPxW-R4x8TNB
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantshZ85LbGiaxg0I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hZ8-5LbGiaxg0I/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: bvkZrMdCandYGyPCH1rh27/projectcss
import sty from "./PlasmicCartItem.module.css"; // plasmic-import: RVnPxW-R4x8TNB/css
import RecycleIcon from "./icons/PlasmicIcon__Recycle"; // plasmic-import: EiQ3VMCAhWR0o9/icon
import Secure2Icon from "./icons/PlasmicIcon__Secure2"; // plasmic-import: vG3kCp4lXu9Lkh/icon
import shoe234MRLgaG65Ktuf from "./images/shoe23.png"; // plasmic-import: 4mR_LgaG65Ktuf/picture

export const PlasmicCartItem__VariantProps = new Array();

export const PlasmicCartItem__ArgProps = new Array(
  "itemImg",
  "title",
  "productNumber",
  "size",
  "quantity"
);

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicCartItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          itemImg: {
            src: shoe234MRLgaG65Ktuf,
            fullWidth: 450,
            fullHeight: 450,
            aspectRatio: undefined
          }
        },
        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshZ85LbGiaxg0I()
  });
  return true ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"200px"}
          src={args.itemImg}
        />
      ) : null}
      {true ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__pV8Jm)}
        >
          <a
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__vg6O)}>
              {p.renderPlasmicSlot({
                defaultContents: "Some Title",
                value: args.title,
                className: classNames(sty.slotTargetTitle)
              })}
            </div>
          </a>
          <div className={classNames(projectcss.all, sty.freeBox__sdG7O)}>
            {p.renderPlasmicSlot({
              defaultContents: "#00000",
              value: args.productNumber,
              className: classNames(sty.slotTargetProductNumber)
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___2R8C)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___1FFzi
              )}
            >
              {"Size: "}
            </div>
            {p.renderPlasmicSlot({
              defaultContents: "11",
              value: args.size
            })}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__eKzd)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pHpWe
              )}
            >
              {"Quantity: "}
            </div>
            {p.renderPlasmicSlot({
              defaultContents: "1",
              value: args.quantity
            })}
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___0Jd7S)}
          >
            <RecycleIcon
              className={classNames(projectcss.all, sty.svg___0YNvX)}
              role={"img"}
            />

            <Secure2Icon
              className={classNames(projectcss.all, sty.svg___0Ie47)}
              role={"img"}
            />
          </p.Stack>
        </p.Stack>
      ) : null}
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "img", "link"],
  img: ["img"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCartItem__ArgProps,
          internalVariantPropNames: PlasmicCartItem__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCartItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCartItem";
  } else {
    func.displayName = `PlasmicCartItem.${nodeName}`;
  }
  return func;
}

export const PlasmicCartItem = Object.assign(
  // Top-level PlasmicCartItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicCartItem
    internalVariantProps: PlasmicCartItem__VariantProps,
    internalArgProps: PlasmicCartItem__ArgProps
  }
);

export default PlasmicCartItem;
/* prettier-ignore-end */
