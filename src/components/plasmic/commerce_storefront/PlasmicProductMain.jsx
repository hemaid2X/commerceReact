// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bvkZrMdCandYGyPCH1rh27
// Component: _ufapZf9wn6BWm
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { ProductMedia } from "@plasmicpkgs/commerce"; // plasmic-import: qpULM0wwWW/codeComponent
import { ProductTextField } from "@plasmicpkgs/commerce"; // plasmic-import: S1F4q0wN6b/codeComponent
import { ProductPriceComponent } from "@plasmicpkgs/commerce"; // plasmic-import: _PaJxGc8gf/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: bvkZrMdCandYGyPCH1rh27/projectcss
import sty from "./PlasmicProductMain.module.css"; // plasmic-import: _ufapZf9wn6BWm/css

export const PlasmicProductMain__VariantProps = new Array();

export const PlasmicProductMain__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicProductMain__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <a
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        "cover-container"
      )}
      href={`/item`}
    >
      <ProductMedia
        data-plasmic-name={"productMedia"}
        data-plasmic-override={overrides.productMedia}
        className={classNames("__wab_instance", sty.productMedia)}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___3JirH)}
      >
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(projectcss.all, projectcss.h3, sty.h3)}
        >
          <ProductTextField
            className={classNames(
              "__wab_instance",
              sty.productTextField__xRxxF
            )}
            field={"name"}
          />
        </h3>
        <div className={classNames(projectcss.all, sty.freeBox__idOq5)}>
          <ProductTextField
            className={classNames(
              "__wab_instance",
              sty.productTextField__g2MAm
            )}
            field={"description"}
          />
        </div>
        <h5
          data-plasmic-name={"h5"}
          data-plasmic-override={overrides.h5}
          className={classNames(projectcss.all, projectcss.h5, sty.h5)}
        >
          <ProductPriceComponent
            data-plasmic-name={"productPrice"}
            data-plasmic-override={overrides.productPrice}
            className={classNames("__wab_instance", sty.productPrice)}
          />
        </h5>
      </p.Stack>
    </a>
  );
}

const PlasmicDescendants = {
  root: ["root", "productMedia", "h3", "h5", "productPrice"],
  productMedia: ["productMedia"],
  h3: ["h3"],
  h5: ["h5", "productPrice"],
  productPrice: ["productPrice"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductMain__ArgProps,
          internalVariantPropNames: PlasmicProductMain__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProductMain__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductMain";
  } else {
    func.displayName = `PlasmicProductMain.${nodeName}`;
  }
  return func;
}

export const PlasmicProductMain = Object.assign(
  // Top-level PlasmicProductMain renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    productMedia: makeNodeComponent("productMedia"),
    h3: makeNodeComponent("h3"),
    h5: makeNodeComponent("h5"),
    productPrice: makeNodeComponent("productPrice"),
    // Metadata about props expected for PlasmicProductMain
    internalVariantProps: PlasmicProductMain__VariantProps,
    internalArgProps: PlasmicProductMain__ArgProps
  }
);

export default PlasmicProductMain;
/* prettier-ignore-end */
