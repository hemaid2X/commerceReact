// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bvkZrMdCandYGyPCH1rh27
// Component: gN5VFAYYcN-qW4
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantshZ85LbGiaxg0I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hZ8-5LbGiaxg0I/globalVariant
import { useUnnamedGlobalGroupOfVariants } from "./PlasmicGlobalVariant__UnnamedGlobalGroupOfVariants"; // plasmic-import: hcBIwuNqA6-pvl/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: bvkZrMdCandYGyPCH1rh27/projectcss
import sty from "./PlasmicCopyrightSocialLanguage.module.css"; // plasmic-import: gN5VFAYYcN-qW4/css

export const PlasmicCopyrightSocialLanguage__VariantProps = new Array();

export const PlasmicCopyrightSocialLanguage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicCopyrightSocialLanguage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshZ85LbGiaxg0I(),
    unnamedGlobalGroupOfVariants: useUnnamedGlobalGroupOfVariants()
  });
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mLox)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__vyUag)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__q0Id)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__pyCyg)}>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__heVU,
                    {
                      [sty.linkglobal_unnamedGlobalGroupOfVariants_unnamedVariant__heVUAqsUc]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    }
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants",
                    "unnamedVariant"
                  )
                    ? "Deploy to Netlify"
                    : "Deploy to Netlify"}
                </a>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__l1Vzj)}>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__kew8A,
                    {
                      [sty.linkglobal_unnamedGlobalGroupOfVariants_unnamedVariant__kew8AAqsUc]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    }
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants",
                    "unnamedVariant"
                  )
                    ? "Clone in GitHub"
                    : "Clone in GitHub"}
                </a>
              </div>
            ) : null}
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__p3Af6)}>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__flcqv,
                    {
                      [sty.linkglobal_unnamedGlobalGroupOfVariants_unnamedVariant__flcqvAqsUc]:
                        hasVariant(
                          globalVariants,
                          "unnamedGlobalGroupOfVariants",
                          "unnamedVariant"
                        )
                    }
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {hasVariant(
                    globalVariants,
                    "unnamedGlobalGroupOfVariants",
                    "unnamedVariant"
                  )
                    ? "Contribute"
                    : "Contribute"}
                </a>
              </div>
            ) : null}
          </p.Stack>
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__aiByx)}>
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "© Company. All rights reserved. This site proudly built with  "
                  : "© Company. All rights reserved. This site proudly built with  "}
              </div>
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__mpzwK
                )}
                href={"https://www.plasmic.app"}
                target={"_blank"}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "Plasmic"
                  : "Plasmic"}
              </a>
            </div>
          ) : null}
        </p.Stack>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCopyrightSocialLanguage__ArgProps,
          internalVariantPropNames: PlasmicCopyrightSocialLanguage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCopyrightSocialLanguage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCopyrightSocialLanguage";
  } else {
    func.displayName = `PlasmicCopyrightSocialLanguage.${nodeName}`;
  }
  return func;
}

export const PlasmicCopyrightSocialLanguage = Object.assign(
  // Top-level PlasmicCopyrightSocialLanguage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicCopyrightSocialLanguage
    internalVariantProps: PlasmicCopyrightSocialLanguage__VariantProps,
    internalArgProps: PlasmicCopyrightSocialLanguage__ArgProps
  }
);

export default PlasmicCopyrightSocialLanguage;
/* prettier-ignore-end */
