// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bvkZrMdCandYGyPCH1rh27
// Component: MWVO8ft3vOdDCB
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import PaheHeaderMenuTextDark from "../../PaheHeaderMenuTextDark"; // plasmic-import: O-g4SX5rheQN7b/component
import { CategoryCollection } from "@plasmicpkgs/commerce"; // plasmic-import: ny07p45F84c_/codeComponent
import { CategoryField } from "@plasmicpkgs/commerce"; // plasmic-import: hzqiq--xdG5T/codeComponent
import { ProductCollection } from "@plasmicpkgs/commerce"; // plasmic-import: vU2jzVAnFP/codeComponent
import ProductMain from "../../ProductMain"; // plasmic-import: _ufapZf9wn6BWm/component
import ShopingSection from "../../ShopingSection"; // plasmic-import: vVEnLULYzbuBh3/component
import Instagram from "../../Instagram"; // plasmic-import: 6sZvKT5GqJ8zc4/component
import Footer from "../../Footer"; // plasmic-import: oy9J-HiVCgE7cB/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: bvkZrMdCandYGyPCH1rh27/projectcss
import sty from "./PlasmicShop.module.css"; // plasmic-import: MWVO8ft3vOdDCB/css

export const PlasmicShop__VariantProps = new Array();

export const PlasmicShop__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicShop__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <PaheHeaderMenuTextDark
            data-plasmic-name={"paheHeaderMenuTextDark"}
            data-plasmic-override={overrides.paheHeaderMenuTextDark}
            className={classNames("__wab_instance", sty.paheHeaderMenuTextDark)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__upcB)}>
            <div className={classNames(projectcss.all, sty.freeBox__lwo7V)}>
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column___7M8Lv)}
                >
                  <CategoryCollection
                    className={classNames(
                      "__wab_instance",
                      sty.categoryCollection__aDb88
                    )}
                    emptyMessage={
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gUyTl
                            )}
                          >
                            {"No collection found!"}
                          </div>
                        )}
                      </ph.DataCtxReader>
                    }
                    loadingMessage={
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__v8XR
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </ph.DataCtxReader>
                    }
                  >
                    <ph.DataCtxReader>
                      {$ctx => (
                        <h4
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            sty.h4__vow0K
                          )}
                        >
                          <CategoryField
                            className={classNames(
                              "__wab_instance",
                              sty.categoryField__g4XgN
                            )}
                            field={"name"}
                          />
                        </h4>
                      )}
                    </ph.DataCtxReader>
                  </CategoryCollection>
                </p.Stack>
                <div className={classNames(projectcss.all, sty.column__lP1Gg)}>
                  <CategoryCollection
                    className={classNames(
                      "__wab_instance",
                      sty.categoryCollection__gL9HF
                    )}
                    emptyMessage={
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__ss9Zo
                            )}
                          >
                            {"No collection found!"}
                          </div>
                        )}
                      </ph.DataCtxReader>
                    }
                    loadingMessage={
                      <ph.DataCtxReader>
                        {$ctx => (
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__u1LIt
                            )}
                          >
                            {"Loading..."}
                          </div>
                        )}
                      </ph.DataCtxReader>
                    }
                  >
                    <ph.DataCtxReader>
                      {$ctx => (
                        <React.Fragment>
                          <h4
                            className={classNames(
                              projectcss.all,
                              projectcss.h4,
                              sty.h4__m7PM4
                            )}
                          >
                            <CategoryField
                              className={classNames(
                                "__wab_instance",
                                sty.categoryField__v0Umb
                              )}
                              field={"name"}
                            />
                          </h4>
                          <ProductCollection
                            data-plasmic-name={"productCollection"}
                            data-plasmic-override={overrides.productCollection}
                            className={classNames(
                              "__wab_instance",
                              sty.productCollection
                            )}
                            emptyMessage={
                              <ph.DataCtxReader>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__gBrBa
                                    )}
                                  >
                                    {"No product found!"}
                                  </div>
                                )}
                              </ph.DataCtxReader>
                            }
                            loadingMessage={
                              <ph.DataCtxReader>
                                {$ctx => (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      projectcss.__wab_text,
                                      sty.text__uNVc
                                    )}
                                  >
                                    {"Loading..."}
                                  </div>
                                )}
                              </ph.DataCtxReader>
                            }
                          >
                            <ph.DataCtxReader>
                              {$ctx =>
                                true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__nLtnH
                                    )}
                                  >
                                    <ProductMain
                                      data-plasmic-name={"productMain"}
                                      data-plasmic-override={
                                        overrides.productMain
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.productMain
                                      )}
                                    />
                                  </div>
                                ) : null
                              }
                            </ph.DataCtxReader>
                          </ProductCollection>
                        </React.Fragment>
                      )}
                    </ph.DataCtxReader>
                  </CategoryCollection>
                </div>
              </div>
            </div>
          </div>
          <ShopingSection
            data-plasmic-name={"shopingSection"}
            data-plasmic-override={overrides.shopingSection}
            className={classNames("__wab_instance", sty.shopingSection)}
          />

          <Instagram
            data-plasmic-name={"instagram"}
            data-plasmic-override={overrides.instagram}
            className={classNames("__wab_instance", sty.instagram)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "paheHeaderMenuTextDark",
    "columns",
    "productCollection",
    "productMain",
    "shopingSection",
    "instagram",
    "footer"
  ],

  paheHeaderMenuTextDark: ["paheHeaderMenuTextDark"],
  columns: ["columns", "productCollection", "productMain"],
  productCollection: ["productCollection", "productMain"],
  productMain: ["productMain"],
  shopingSection: ["shopingSection"],
  instagram: ["instagram"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicShop__ArgProps,
          internalVariantPropNames: PlasmicShop__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicShop__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShop";
  } else {
    func.displayName = `PlasmicShop.${nodeName}`;
  }
  return func;
}

export const PlasmicShop = Object.assign(
  // Top-level PlasmicShop renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    paheHeaderMenuTextDark: makeNodeComponent("paheHeaderMenuTextDark"),
    columns: makeNodeComponent("columns"),
    productCollection: makeNodeComponent("productCollection"),
    productMain: makeNodeComponent("productMain"),
    shopingSection: makeNodeComponent("shopingSection"),
    instagram: makeNodeComponent("instagram"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicShop
    internalVariantProps: PlasmicShop__VariantProps,
    internalArgProps: PlasmicShop__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Category",
      description:
        "Inceptos tempor torquent tortor a aptent parturient a a himenaeos in ipsum ad vestibulum euismod ultrices dis vulputate vestibulum non adipiscing.",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicShop;
/* prettier-ignore-end */
