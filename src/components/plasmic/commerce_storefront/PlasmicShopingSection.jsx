// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bvkZrMdCandYGyPCH1rh27
// Component: vVEnLULYzbuBh3
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants as useScreenVariantshZ85LbGiaxg0I } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hZ8-5LbGiaxg0I/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_commerce_storefront.module.css"; // plasmic-import: bvkZrMdCandYGyPCH1rh27/projectcss
import sty from "./PlasmicShopingSection.module.css"; // plasmic-import: vVEnLULYzbuBh3/css
import RightArrowIcon from "./icons/PlasmicIcon__RightArrow"; // plasmic-import: eB1cOW98y_DFih/icon
import exploreBanner1PngXc5Sic8Nd4Pfxq from "./images/exploreBanner1Png.png"; // plasmic-import: Xc5sic8Nd4Pfxq/picture

export const PlasmicShopingSection__VariantProps = new Array();

export const PlasmicShopingSection__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicShopingSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshZ85LbGiaxg0I()
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"container433"}
        data-plasmic-override={overrides.container433}
        hasGap={true}
        className={classNames(projectcss.all, sty.container433)}
      >
        <div className={classNames(projectcss.all, sty.column__c6HJh)}>
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"A new shopping \nexperience"}
              </h2>
              {true ? (
                <p.Stack
                  as={"a"}
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  hasGap={true}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  href={`/item`}
                >
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Explore products"}
                  </div>
                  <RightArrowIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </div>
        <div className={classNames(projectcss.all, sty.column__zQu76)}>
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "320px /* plasmic-token: 0UePHU5_FLXMrf */"
                : "661px"
            }
            displayMaxHeight={"none"}
            displayMaxWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100%"
                : "100%"
            }
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? "100%"
                : "783px"
            }
            loading={"lazy"}
            src={{
              src: exploreBanner1PngXc5Sic8Nd4Pfxq,
              fullWidth: 1200,
              fullHeight: 1508,
              aspectRatio: undefined
            }}
          />
        </div>
      </p.Stack>
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "container433", "freeBox", "h2", "link", "text", "svg", "img"],
  container433: ["container433", "freeBox", "h2", "link", "text", "svg", "img"],
  freeBox: ["freeBox", "h2", "link", "text", "svg"],
  h2: ["h2"],
  link: ["link", "text", "svg"],
  text: ["text"],
  svg: ["svg"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicShopingSection__ArgProps,
          internalVariantPropNames: PlasmicShopingSection__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicShopingSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicShopingSection";
  } else {
    func.displayName = `PlasmicShopingSection.${nodeName}`;
  }
  return func;
}

export const PlasmicShopingSection = Object.assign(
  // Top-level PlasmicShopingSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    container433: makeNodeComponent("container433"),
    freeBox: makeNodeComponent("freeBox"),
    h2: makeNodeComponent("h2"),
    link: makeNodeComponent("link"),
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicShopingSection
    internalVariantProps: PlasmicShopingSection__VariantProps,
    internalArgProps: PlasmicShopingSection__ArgProps
  }
);

export default PlasmicShopingSection;
/* prettier-ignore-end */
